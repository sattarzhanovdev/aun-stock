import React, { useRef } from 'react'
import html2pdf from 'html2pdf.js'
import c from './workers.module.scss'

const API_BASE = 'https://auncrm.pythonanywhere.com'

const toNum = (v) => {
  const n = typeof v === 'string' ? v.replace(',', '.').trim() : v
  const x = Number(n)
  return Number.isFinite(x) ? x : 0
}
const money = (n) => new Intl.NumberFormat('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(toNum(n))

const DispatchHistory = () => {
  const [month, setMonth] = React.useState('')
  const [data, setData] = React.useState(null)
  const [selected, setSelected] = React.useState(null)

  // –ª–æ–∫–∞–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
  const [recipient, setRecipient] = React.useState('')
  const [rows, setRows] = React.useState([]) // [{id, name, unit, quantity, price, total}]
  const [saving, setSaving] = React.useState(false)

  const printRef = useRef()

  React.useEffect(() => {
    const date = new Date()
    const m = date.toLocaleString('ru', { month: 'long' })
    setMonth(m.charAt(0).toUpperCase() + m.slice(1))
  }, [])

  React.useEffect(() => {
    fetch(`${API_BASE}/clients/dispatches/`)
      .then(res => res.json())
      .then(res => {
        const sorted = res.sort((a, b) => new Date(b.date) - new Date(a.date))
        setData(sorted)
      })
      .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫:', err))
  }, [])

  const onPickRow = (item) => {
    setSelected(item)
    setRecipient(item.recipient || '')
    setRows((item.items || []).map(r => ({
      id: r.id, name: r.name, unit: r.unit || '—à—Ç',
      quantity: toNum(r.quantity),
      price: toNum(r.price),
      total: toNum(r.total)
    })))
  }

  const recalcRow = (idx, patch) => {
    setRows(prev => {
      const next = [...prev]
      const row = { ...next[idx], ...patch }
      const q = toNum(row.quantity)
      const p = toNum(row.price)
      row.total = +(q * p).toFixed(2)
      next[idx] = row
      return next
    })
  }

  const calcTotal = React.useMemo(
    () => rows.reduce((s, r) => s + toNum(r.total), 0),
    [rows]
  )

  const handlePrint = () => {
    const printContents = printRef.current.innerHTML
    const printWindow = window.open('', '', 'height=600,width=800')
    printWindow.document.write('<html><head><title>–ù–∞–∫–ª–∞–¥–Ω–∞—è</title>')
    printWindow.document.write('<style>table{width:100%;border-collapse:collapse} th,td{border:1px solid #000;padding:5px} body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial}</style>')
    printWindow.document.write('</head><body class="pagebreak">')
    printWindow.document.write(printContents)
    printWindow.document.write('</body></html>')
    printWindow.document.close()
    printWindow.focus()
    printWindow.print()
    printWindow.close()
  }

  const handleDownloadPDF = () => {
    const element = printRef.current
    const prev = {
      maxHeight: element.style.maxHeight,
      overflow: element.style.overflow,
      height: element.style.height,
    }
    element.style.maxHeight = 'none'
    element.style.overflow = 'visible'
    element.style.height = 'auto'

    const safeRecipient = (recipient || selected?.recipient || '–ü–æ–ª—É—á–∞—Ç–µ–ª—å').replace(/[\\/:*?"<>|]/g, '_')

    const opt = {
      margin: 0.5,
      filename: `–Ω–∞–∫–ª–∞–¥–Ω–∞—è-${safeRecipient}-${new Date(selected.date).toLocaleDateString('ru-RU')}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true, allowTaint: false },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
      pagebreak: { mode: ['avoid-all', 'css', 'legacy'] },
    }

    html2pdf().set(opt).from(element).save().then(() => {
      element.style.maxHeight = prev.maxHeight
      element.style.overflow = prev.overflow
      element.style.height = prev.height
    })
  }

  const handleSaveBackend = async () => {
    if (!selected) return
    try {
      setSaving(true)
      // –≥–æ—Ç–æ–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –±—ç–∫—É
      const payload = {
        recipient: recipient || '',
        items: rows.map(r => ({
          id: r.id,
          quantity: toNum(r.quantity),
          price: toNum(r.price),
          // total –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç—Å—è, –º–æ–∂–Ω–æ –Ω–µ —Å–ª–∞—Ç—å
        })),
      }

      const res = await fetch(`${API_BASE}/clients/dispatches/${selected.id}/`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,
        },
        body: JSON.stringify(payload),
      })
      if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
      const updated = await res.json()

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      setData(prev => prev.map(x => (x.id === updated.id ? { ...x, ...updated } : x)))
      setSelected(updated)
      setRecipient(updated.recipient || '')
      setRows((updated.items || []).map(r => ({
        id: r.id, name: r.name, unit: r.unit || '—à—Ç',
        quantity: toNum(r.quantity), price: toNum(r.price), total: toNum(r.total)
      })))

      alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ backend')
    } catch (e) {
      console.error(e)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')
    } finally {
      setSaving(false)
    }
  }

  return (
    <div className={c.workers}>
      <div className={c.table}>
        <div className={c.table__header}>
          <h2>–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫ –∑–∞ {month}</h2>
        </div>

        <table>
          <thead>
            <tr>
              <th>–î–∞—Ç–∞</th>
              <th>–ö—É–¥–∞</th>
              <th>–°—É–º–º–∞</th>
            </tr>
          </thead>
          <tbody>
            {data && data.map((item, index) => (
              <tr key={index} onClick={() => onPickRow(item)} style={{ cursor: 'pointer' }}>
                <td>{new Date(item.date).toLocaleDateString('ru-RU')}</td>
                <td>{item.recipient}</td>
                <td>{money(item.total)} —Å–æ–º</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {selected && (
        <div className={c.popup}>
          {/* –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è) */}
          <div style={{ display: 'flex', gap: 12, alignItems: 'center', marginBottom: 10, flexWrap: 'wrap' }}>
            <label style={{ whiteSpace: 'nowrap' }}>
              –ö–æ–º—É:&nbsp;
              <input
                type="text"
                value={recipient}
                onChange={(e) => setRecipient(e.target.value)}
                placeholder="–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
                style={{ padding: 6, minWidth: 260 }}
              />
            </label>
            <button onClick={handleSaveBackend} disabled={saving}>
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ‚Ä¶' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ backend'}
            </button>
            <button onClick={handlePrint}>üñ®Ô∏è –ü–µ—á–∞—Ç—å</button>
            <button onClick={handleDownloadPDF}>üìÑ PDF</button>
            <button onClick={() => setSelected(null)}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>

          {/* –ü–µ—á–∞—Ç–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å */}
          <div className={c.popup__content} ref={printRef}>
            <h2 style={{ textAlign: 'center', marginBottom: 8 }}>–ù–ê–ö–õ–ê–î–ù–ê–Ø ‚Ññ ______</h2>
            <p style={{ textAlign: 'right' }}>{new Date(selected.date).toLocaleDateString('ru-RU')} –≥</p>

            <p><strong>–ö–æ–º—É:</strong> {recipient || selected.recipient}</p>
            <p><strong>–û—Ç –∫–æ–≥–æ:</strong> –°–∫–ª–∞–¥ AUN</p>

            <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: 12 }} border={1}>
              <thead>
                <tr>
                  <th>‚Ññ –ø/–ø</th>
                  <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                  <th>–ï–¥.</th>
                  <th style={{ width: 120 }}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                  <th style={{ width: 140 }}>–¶–µ–Ω–∞ (—Å–æ–º)</th>
                  <th>–°—É–º–º–∞ (—Å–æ–º)</th>
                </tr>
              </thead>
              <tbody>
                {rows.map((r, idx) => (
                  <tr key={r.id}>
                    <td style={{ textAlign: 'center' }}>{idx + 1}</td>
                    <td>{r.name}</td>
                    <td style={{ textAlign: 'center' }}>{r.unit || '—à—Ç'}</td>

                    {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ */}
                    <td style={{ textAlign: 'center' }}>
                      <input
                        type="number"
                        step="0.01"
                        value={r.quantity}
                        onChange={(e) => recalcRow(idx, { quantity: e.target.value })}
                        style={{ width: '100%', boxSizing: 'border-box', textAlign: 'right' }}
                      />
                    </td>

                    {/* –¶–µ–Ω–∞ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è */}
                    <td style={{ textAlign: 'center' }}>
                      <input
                        type="number"
                        step="0.01"
                        value={r.price}
                        onChange={(e) => recalcRow(idx, { price: e.target.value })}
                        style={{ width: '100%', boxSizing: 'border-box', textAlign: 'right' }}
                      />
                    </td>

                    {/* –°—É–º–º–∞ ‚Äî –∞–≤—Ç–æ */}
                    <td style={{ textAlign: 'right' }}>{money(r.total)}</td>
                  </tr>
                ))}

                {Array.from({ length: Math.max(10 - rows.length, 0) }).map((_, i) => (
                  <tr key={`empty-${i}`}>
                    <td style={{ textAlign: 'center' }}>{rows.length + i + 1}</td>
                    <td colSpan={5}>&nbsp;</td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div style={{ marginTop: 10, textAlign: 'right' }}>
              <p><strong>–ò—Ç–æ–≥–æ:</strong> {money(calcTotal)} —Å–æ–º</p>
              <p>–í —Ç–æ–º —á–∏—Å–ª–µ –ù–î–° (0%)</p>
            </div>

            <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 40 }}>
              <div>
                <p>–°–¥–∞–ª: _____________</p>
                <p>–ø–æ–¥–ø–∏—Å—å</p>
                <p>–§.–ò.–û.</p>
              </div>
              <div>
                <p>–ü—Ä–∏–Ω—è–ª: _____________</p>
                <p>–ø–æ–¥–ø–∏—Å—å</p>
                <p>–§.–ò.–û.</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default DispatchHistory